
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/tutorial_02_estimators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_tutorial_02_estimators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_tutorial_02_estimators.py:


2 - Semi-variance Estimators
============================

This tutorial focuses on experimental variograms.
It will guide you through the main semi-variance estimators available in
SciKit-GStat. Additionally, most of the parameters available for building ###
an experimental variogram will be discussed.

**In this tutorial you will learn:**

    * what estimators are available
    * how they differ

.. GENERATED FROM PYTHON SOURCE LINES 16-22

.. code-block:: default

    import skgstat as skg
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.ndimage import zoom
    skg.plotting.backend('matplotlib')







.. GENERATED FROM PYTHON SOURCE LINES 23-29

2.1 Load data
-------------
This tutorial will use the same data samples as the models tutorial.
These are samples from the pancake image sampled at different sample sizes.
We will use only the second one, but you can re-run all the examples with
any of the other fields.

.. GENERATED FROM PYTHON SOURCE LINES 29-35

.. code-block:: default

    s = [30, 80, 300]
    data1 = skg.data.pancake(N=s[0], seed=42, as_dataframe=True).get('sample')
    data2 = skg.data.pancake(N=s[1], seed=42, as_dataframe=True).get('sample')
    data3 = skg.data.pancake(N=s[2], seed=42, as_dataframe=True).get('sample')









.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default

    def plot_scatter(data, ax):
        art = ax.scatter(data.x, data.y, 50, c=data.v, cmap='plasma')
        plt.colorbar(art, ax=ax)








.. GENERATED FROM PYTHON SOURCE LINES 42-43

make a nice overview of the samples

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default

    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    for data, ax in zip((data1, data2, data3), axes.flatten()):
        plot_scatter(data, ax)





.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_001.png
   :alt: tutorial 02 estimators
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 49-52

2.2 Comparing estimators
------------------------
calculate all variograms, but use only the second one

.. GENERATED FROM PYTHON SOURCE LINES 52-59

.. code-block:: default


    V1 = skg.Variogram(data2[['x', 'y']].values, data2.v.values, normalize=False, n_lags=8, use_nugget=True)
    V2 = skg.Variogram(data2[['x', 'y']].values, data2.v.values, normalize=False, n_lags=15, use_nugget=True)
    V3 = skg.Variogram(data2[['x', 'y']].values, data2.v.values, normalize=False, n_lags=25, use_nugget=True)

    vario = V2








.. GENERATED FROM PYTHON SOURCE LINES 60-73

The default estimator configured in :class:`Variogram <skgstat.Variogram>` 
is the :func:`Mathéron estimator <skgstat.estimators.matheron>`
(Mathéron, 1963). It is defined like:

.. math::

  \gamma (h) = \frac{1}{2N(h)} * \sum_{i=1}^{N(h)}(Z(x_i) - Z(x_{i+h}))^2

where:

  * :math:`h` is the distance lag
  * :math:`h` is the number of observation pairs in :math:`h`-lag class
  * :math:`Z(x_i)` is the observation at the :math:`i`-th location :math:`x`

.. GENERATED FROM PYTHON SOURCE LINES 73-75

.. code-block:: default

    vario.plot(show=False)




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_002.png
   :alt: tutorial 02 estimators
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 800x500 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 76-82

Following the histogram, we should set a :func:`maxlag <skgstat.Variogram.maxlag>`.
This property accepts a number 0 < maxlag < 1 to set the :func:`maxlag <skgstat.Variogram.maxlag>`
to this ratio of the maximum separating distance. A number > 1 will use this at an absolute limit.
You can also pass ``'mean'`` or ``'median'``.
This will calculate and set the mean or median of all distances in the
distance matrix as :func:`maxlag <skgstat.Variogram.maxlag>`.

.. GENERATED FROM PYTHON SOURCE LINES 82-85

.. code-block:: default

    vario.maxlag = 'median'
    vario.plot(show=False);




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_003.png
   :alt: tutorial 02 estimators
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <Figure size 800x500 with 2 Axes>



.. GENERATED FROM PYTHON SOURCE LINES 86-121

2.3 Alternative estimators
--------------------------
SciKit-GStat implements more than only the Mathéron estimator.
Setting :func:`estimator='cressie' <skgstat.estimators.cressie>`
will set the Cressie-Hawkins estimator.
It is implemented as follows (Cressie and Hawkins, 1980):

.. math::

  2\gamma (h) = \frac{\left(\frac{1}{N(h)} \sum_{i=1}^{N(h)} |Z(x_i) - Z(x_{i+h})|^{0.5}\right)^4}{0.457 + \frac{0.494}{N(h)} + \frac{0.045}{N^2(h)}}

By setting :func:`estimator='dowd' <skgstat.estimators.dowd>`,
the Dowd estimator (Dowd, 1984) will be used:

.. matho::

  2\gamma (h) = 2.198 * {median(Z(x_i) - Z(x_{i+h}))}^2 

Finally, :func:`estimator='genton' <skgstat.estimators.genton>`
will set the Genton estimator (Genton, 1998):

.. math::

  \gamma (h) = 2.2191\{|V_i(h) - V_j(h)|; i < j\}_{(k)}

with: 

.. math::
  k = \binom{[N_h / 2] + 1}{2}

and:

.. math::
  q = \binom{N_h}{2}


.. GENERATED FROM PYTHON SOURCE LINES 121-128

.. code-block:: default

    fig, _a = plt.subplots(1, 3, figsize=(12, 3), sharey=True)
    axes = _a.flatten()
    for ax, estimator_name in zip(axes, ('matheron', 'cressie', 'dowd')):
        vario.estimator = estimator_name
        vario.plot(axes=ax, hist=False, show=False)
        ax.set_title(estimator_name.capitalize())




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_004.png
   :alt: Matheron, Cressie, Dowd
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 129-135

The important part is here that the effective range as well as the sill is 
changeing for the estimator. This will likely change the Kriging result.
For Kriging, the difference on the first few lag classes is important,
as no points will be used for estimation, that lies outside the range.
We will zoom in, to actually use a higher resolution. Thus the results
will be quite smooth.

.. GENERATED FROM PYTHON SOURCE LINES 135-149

.. code-block:: default

    xx, yy = np.mgrid[100:199:100j, 0:99:100j]
    fig, _a = plt.subplots(1, 3, figsize=(18, 6))
    axes = _a.flatten()

    fields = []
    for ax, est in zip(axes, ('matheron', 'cressie', 'dowd')):
        vario.estimator = est
        ok = skg.OrdinaryKriging(vario, min_points=5, max_points=15, mode='exact')
        field = ok.transform(xx.flatten(), yy.flatten()).reshape(xx.shape)
        fields.append(field)
        art = ax.matshow(field, origin='lower', cmap='plasma', vmin=vario.values.min(), vmax=vario.values.max())
        plt.colorbar(art, ax=ax)
        ax.set_title(est.capitalize())




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_005.png
   :alt: Matheron, Cressie, Dowd
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 150-152

It's hard to see this by eye, but there are actually some differences.
Let's load the original field as well and see which estimator performed best.

.. GENERATED FROM PYTHON SOURCE LINES 152-184

.. code-block:: default

    pan = skg.data.pancake_field().get('sample')

    # rescale to 100x100
    # pan = zoom(pan, 0.2)
    # select the same extend
    pan = pan[100:200, 0:100]

    fig, axes = plt.subplots(2, 2, figsize=(10,10), sharex=True, sharey=True)

    # original
    m = axes[0][0].matshow(pan, origin='lower', cmap='Reds_r')
    plt.colorbar(m, ax=axes[0][0])
    axes[0][0].set_title('Original')

    # matheron
    m = axes[0][1].matshow(np.abs(pan - fields[0]), origin='lower', cmap='YlGn_r', vmin=0, vmax=25)
    plt.colorbar(m, ax=axes[0][1])
    axes[0][1].set_title(f'|Original - Matheron|; Diff: {np.abs(pan - fields[0]).mean().round(1)}')

    # cressie
    m = axes[1][0].matshow(np.abs(pan - fields[1]), origin='lower', cmap='YlGn_r', vmin=0, vmax=25)
    plt.colorbar(m, ax=axes[1][0])
    axes[1][0].set_title(f'|Original - Cressie| Diff: {np.abs(pan - fields[1]).mean().round(1)}')

    # dowd
    m = axes[1][1].matshow(np.abs(pan - fields[2]), origin='lower', cmap='YlGn_r', vmin=0, vmax=25)
    plt.colorbar(m, ax=axes[1][1])
    axes[1][1].set_title(f'|Original - Dowd| Diff: {np.abs(pan - fields[2]).mean().round(1)}')


    plt.tight_layout()




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_02_estimators_006.png
   :alt: Original, |Original - Matheron|; Diff: 21.1, |Original - Cressie| Diff: 17.7, |Original - Dowd| Diff: 16.3
   :srcset: /auto_examples/images/sphx_glr_tutorial_02_estimators_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 185-201

In the extracted part of the field, quite some differences are visible.
The Matheron estimator is less robust and can't capture the higher values in
the upper left corner not as quite well as the other estimators. One can also
see, that a substantial amount of the deviations are caused by the noisy
character of the original image. Note that we loaded the field without
applying any kind of filter to it. 

2.4 References
--------------
Cressie, N., and D. Hawkins (1980): Robust estimation of the variogram. Math. Geol., 12, 115-125.

Dowd, P. A., (1984): The variogram and kriging: Robust and resistant estimators, in Geostatistics for Natural Resources Characterization. Edited by G. Verly et al., pp. 91 - 106, D. Reidel, Dordrecht.

Genton, M. G., (1998): Highly robust variogram estimation, Math. Geol., 30, 213 - 221.

Matheron, G. (1963). Principles of geostatistics. Economic Geology, 58(8), 1246–1266. https://doi.org/10.2113/gsecongeo.58.8.1246


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.512 seconds)


.. _sphx_glr_download_auto_examples_tutorial_02_estimators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_02_estimators.py <tutorial_02_estimators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_02_estimators.ipynb <tutorial_02_estimators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
