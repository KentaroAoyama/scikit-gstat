
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/tutorial_07_maximum_likelihood_fit.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_tutorial_07_maximum_likelihood_fit.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_tutorial_07_maximum_likelihood_fit.py:


7. Maximum Likelihood fit
=========================

Since version ``0.6.12`` SciKit-GStat implements an utility function factory
which takes a Variogram instance and builds up a (negative) maximum likelihood
function for the associated sample, distance matrix and model type.
The used function is defined in eq. 14 from Lark (2000). Eq. 16 from same
publication was adapted to all available theoretical models available in
SciKit-GStat, with the exception of the harmonized model, which
does not require a fitting.

This tutorial helps you to build your own maximum likelihood approximation
for use in your geostatistical application. Note that SciKit-GStat is build
around the method of moments and does not support maximum likelihood beyond
the approach presented here.


**References**

Lark, R. M. "Estimating variograms of soil properties by the method‐of‐moments and maximum
likelihood." European Journal of Soil Science 51.4 (2000): 717-728.

.. GENERATED FROM PYTHON SOURCE LINES 24-33

.. code-block:: default

    import skgstat as skg
    from skgstat.util.likelihood import get_likelihood
    import numpy as np
    import matplotlib.pyplot as plt
    from scipy.optimize import minimize
    import warnings
    from time import time
    warnings.filterwarnings('ignore')








.. GENERATED FROM PYTHON SOURCE LINES 34-35

We use the pancake dataset, sampled at 300 random locations to produce a quite dense sample.

.. GENERATED FROM PYTHON SOURCE LINES 35-37

.. code-block:: default

    c, v = skg.data.pancake(N=300, seed=42).get('sample')








.. GENERATED FROM PYTHON SOURCE LINES 38-45

First of, the variogram is calculated. We use Scott's rule to determine
the number of lag classes, explicitly set Trust-Region Reflective as
fitting method (although its default) and limit the distance matrix to
70% of the maximum separating distance.
Additionally, we capture the processing time for the whole variogram
estimation. Note, that this also includes the calculation of the
distance matrix, which is a mututal step.

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default

    t1 = time()
    V = skg.Variogram(c,v, bin_func='scott', maxlag=0.7, fit_func='trf')
    t2 = time() # get time for full analysis, including fit
    print(f"Processing time: {round((t2 - t1) * 1000)} ms")
    print(V)
    fig = V.plot()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processing time: 15 ms
    spherical Variogram
    -------------------
    Estimator:         matheron
            Effective Range:   326.72
            Sill:              1584.49
            Nugget:            0.00
        
    {'text/html': '<div>            <script src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG"></script><script type="text/javascript">if (window.MathJax && window.MathJax.Hub && && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: "STIX-Web"}});}</script>                <script type="text/javascript">window.PlotlyConfig = {MathJaxConfig: \'local\'};</script>\n        <script src="https://cdn.plot.ly/plotly-2.12.1.min.js"></script>                <div id="41ccd1f5-40db-458e-a6f2-76aea8494d0f" class="plotly-graph-div" style="height:525px; width:100%;"></div>            <script type="text/javascript">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById("41ccd1f5-40db-458e-a6f2-76aea8494d0f")) {                    Plotly.newPlot(                        "41ccd1f5-40db-458e-a6f2-76aea8494d0f",                        [{"marker":{"color":"blue"},"mode":"markers","name":"Experimental","x":[12.172981635580792,22.931749708788487,33.69051778199618,44.449285855203875,55.20805392841157,65.96682200161926,76.72559007482697,87.48435814803466,98.24312622124235,109.00189429445005,119.76066236765774,130.51943044086545,141.27819851407315,152.03696658728086,162.79573466048853,173.55450273369624,184.31327080690394,195.07203888011162,205.83080695331932,216.58957502652703,227.3483430997347,238.1071111729424,248.86587924615012,259.6246473193578,270.3834153925655,281.1421834657732,291.9009515389809,302.6597196121886,313.41848768539626,324.17725575860396,334.93602383181167,345.6947919050194,356.4535599782271,367.2123280514348,377.9710961246425,388.72986419785013,399.48863227105784,410.24740034426554,421.00616841747325,431.76493649068095,442.52370456388866,453.28247263709636],"y":[101.46153846153847,222.16046511627906,266.27201257861634,495.69666666666666,529.2734530938123,677.2904468412943,624.6871508379888,756.2203182374541,789.3340707964602,869.6050545094153,882.6628895184136,941.530881017257,962.6288395904437,1036.9175257731958,1085.2048242027802,1090.359094457455,1153.9953102453103,1271.3366834170854,1216.569633152174,1217.950634696756,1317.5525017618043,1270.0069204152248,1407.2297677691765,1401.7684441197955,1505.1655480984339,1525.1826636904761,1633.5007390983,1527.1660000000002,1516.3287724784989,1604.990376904571,1696.1367153912297,1733.9202566452796,1585.1479400749063,1696.3042813455659,1609.1273428886439,1623.306330472103,1611.1470588235295,1483.4750312109863,1576.8342281879193,1552.6880466472303,1513.58615136876,1569.7122557726466],"type":"scatter","xaxis":"x2","yaxis":"y2"},{"marker":{"color":"green"},"mode":"lines","name":"spherical model","x":[0.0,4.578610834718145,9.15722166943629,13.735832504154434,18.31444333887258,22.893054173590723,27.471665008308868,32.05027584302701,36.62888667774516,41.207497512463306,45.78610834718145,50.36471918189959,54.943330016617736,59.521940851335884,64.10055168605402,68.67916252077217,73.25777335549031,77.83638419020846,82.41499502492661,86.99360585964475,91.5722166943629,96.15082752908104,100.72943836379918,105.30804919851732,109.88666003323547,114.46527086795362,119.04388170267177,123.6224925373899,128.20110337210804,132.77971420682618,137.35832504154433,141.93693587626248,146.51554671098063,151.09415754569878,155.67276838041693,160.25137921513507,164.82999004985322,169.40860088457134,173.9872117192895,178.56582255400764,183.1444333887258,187.72304422344394,192.30165505816208,196.88026589288023,201.45887672759835,206.0374875623165,210.61609839703465,215.1947092317528,219.77332006647094,224.3519309011891,228.93054173590724,233.5091525706254,238.08776340534354,242.66637424006166,247.2449850747798,251.82359590949795,256.4022067442161,260.98081757893425,265.55942841365237,270.13803924837055,274.71665008308867,279.29526091780684,283.87387175252496,288.45248258724314,293.03109342196126,297.6097042566794,302.18831509139756,306.7669259261157,311.34553676083385,315.924147595552,320.50275843027015,325.08136926498827,329.65998009970644,334.23859093442456,338.8172017691427,343.39581260386086,347.974423438579,352.55303427329716,357.1316451080153,361.71025594273345,366.2888667774516,370.8674776121697,375.44608844688787,380.024699281606,384.60331011632417,389.1819209510423,393.76053178576046,398.3391426204786,402.9177534551967,407.4963642899149,412.074975124633,416.6535859593512,421.2321967940693,425.8108076287875,430.3894184635056,434.96802929822377,439.5466401329419,444.12525096766,448.7038618023782,453.28247263709636],"y":[0.0,33.30502153789069,66.59696081704318,99.86273557871932,133.08926356418084,166.26346251468968,199.37225017150755,232.40254427589625,265.34126256911765,298.1753227924336,330.8916426871058,363.4771399943961,395.9187324555664,428.20333781187844,460.31787380459383,492.2492581749748,523.9844086642828,555.5102430137799,586.8136789647278,617.8816342583883,648.7010266360231,679.2587738388942,709.5417936082634,739.5370036853924,769.2313218115431,798.6116657279773,827.6649531759567,856.3781018967431,884.7380296315986,912.7316541217847,940.3458931085636,967.5676643331967,994.3838855369457,1020.7814744610729,1046.74734884684,1072.2684264355084,1097.3316249683405,1121.9238621865977,1146.032055831542,1169.643123644435,1192.7439833665385,1215.3215527391146,1237.3627495034252,1258.8544914007318,1279.783696172296,1300.13728155938,1319.902165303246,1339.0652651451549,1357.613498826369,1375.5337840881498,1392.8130386717598,1409.4381803184601,1425.396126769513,1440.67379576618,1455.2581050497229,1469.1359723614037,1482.294315442484,1494.720052034226,1506.400099877891,1517.3213767147417,1527.4708002860386,1536.8352883330447,1545.401758597021,1553.1571288192295,1560.0883167409322,1566.1822401033908,1571.4258166478674,1575.8059641156233,1579.3096002479206,1581.923642786021,1583.6350094711868,1584.430618044679,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721,1584.4903420722721],"type":"scatter","xaxis":"x2","yaxis":"y2"},{"marker":{"color":"red"},"name":"Histogram","x":[12.172981635580792,22.931749708788487,33.69051778199618,44.449285855203875,55.20805392841157,65.96682200161926,76.72559007482697,87.48435814803466,98.24312622124235,109.00189429445005,119.76066236765774,130.51943044086545,141.27819851407315,152.03696658728086,162.79573466048853,173.55450273369624,184.31327080690394,195.07203888011162,205.83080695331932,216.58957502652703,227.3483430997347,238.1071111729424,248.86587924615012,259.6246473193578,270.3834153925655,281.1421834657732,291.9009515389809,302.6597196121886,313.41848768539626,324.17725575860396,334.93602383181167,345.6947919050194,356.4535599782271,367.2123280514348,377.9710961246425,388.72986419785013,399.48863227105784,410.24740034426554,421.00616841747325,431.76493649068095,442.52370456388866,453.28247263709636],"y":[91,215,318,450,501,649,716,817,904,1009,1059,1101,1172,1261,1223,1281,1386,1393,1472,1418,1419,1445,1421,1369,1341,1344,1353,1250,1279,1247,1163,1091,1068,981,907,932,782,801,745,686,621,563],"type":"bar"}],                        {"template":{"data":{"histogram2dcontour":[{"type":"histogram2dcontour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"choropleth":[{"type":"choropleth","colorbar":{"outlinewidth":0,"ticks":""}}],"histogram2d":[{"type":"histogram2d","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmap":[{"type":"heatmap","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"heatmapgl":[{"type":"heatmapgl","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"contourcarpet":[{"type":"contourcarpet","colorbar":{"outlinewidth":0,"ticks":""}}],"contour":[{"type":"contour","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"surface":[{"type":"surface","colorbar":{"outlinewidth":0,"ticks":""},"colorscale":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]]}],"mesh3d":[{"type":"mesh3d","colorbar":{"outlinewidth":0,"ticks":""}}],"scatter":[{"fillpattern":{"fillmode":"overlay","size":10,"solidity":0.2},"type":"scatter"}],"parcoords":[{"type":"parcoords","line":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolargl":[{"type":"scatterpolargl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"bar":[{"error_x":{"color":"#2a3f5f"},"error_y":{"color":"#2a3f5f"},"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"bar"}],"scattergeo":[{"type":"scattergeo","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterpolar":[{"type":"scatterpolar","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"histogram":[{"marker":{"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"histogram"}],"scattergl":[{"type":"scattergl","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatter3d":[{"type":"scatter3d","line":{"colorbar":{"outlinewidth":0,"ticks":""}},"marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattermapbox":[{"type":"scattermapbox","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scatterternary":[{"type":"scatterternary","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"scattercarpet":[{"type":"scattercarpet","marker":{"colorbar":{"outlinewidth":0,"ticks":""}}}],"carpet":[{"aaxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"baxis":{"endlinecolor":"#2a3f5f","gridcolor":"white","linecolor":"white","minorgridcolor":"white","startlinecolor":"#2a3f5f"},"type":"carpet"}],"table":[{"cells":{"fill":{"color":"#EBF0F8"},"line":{"color":"white"}},"header":{"fill":{"color":"#C8D4E3"},"line":{"color":"white"}},"type":"table"}],"barpolar":[{"marker":{"line":{"color":"#E5ECF6","width":0.5},"pattern":{"fillmode":"overlay","size":10,"solidity":0.2}},"type":"barpolar"}],"pie":[{"automargin":true,"type":"pie"}]},"layout":{"autotypenumbers":"strict","colorway":["#636efa","#EF553B","#00cc96","#ab63fa","#FFA15A","#19d3f3","#FF6692","#B6E880","#FF97FF","#FECB52"],"font":{"color":"#2a3f5f"},"hovermode":"closest","hoverlabel":{"align":"left"},"paper_bgcolor":"white","plot_bgcolor":"#E5ECF6","polar":{"bgcolor":"#E5ECF6","angularaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"radialaxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"ternary":{"bgcolor":"#E5ECF6","aaxis":{"gridcolor":"white","linecolor":"white","ticks":""},"baxis":{"gridcolor":"white","linecolor":"white","ticks":""},"caxis":{"gridcolor":"white","linecolor":"white","ticks":""}},"coloraxis":{"colorbar":{"outlinewidth":0,"ticks":""}},"colorscale":{"sequential":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"sequentialminus":[[0.0,"#0d0887"],[0.1111111111111111,"#46039f"],[0.2222222222222222,"#7201a8"],[0.3333333333333333,"#9c179e"],[0.4444444444444444,"#bd3786"],[0.5555555555555556,"#d8576b"],[0.6666666666666666,"#ed7953"],[0.7777777777777778,"#fb9f3a"],[0.8888888888888888,"#fdca26"],[1.0,"#f0f921"]],"diverging":[[0,"#8e0152"],[0.1,"#c51b7d"],[0.2,"#de77ae"],[0.3,"#f1b6da"],[0.4,"#fde0ef"],[0.5,"#f7f7f7"],[0.6,"#e6f5d0"],[0.7,"#b8e186"],[0.8,"#7fbc41"],[0.9,"#4d9221"],[1,"#276419"]]},"xaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"yaxis":{"gridcolor":"white","linecolor":"white","ticks":"","title":{"standoff":15},"zerolinecolor":"white","automargin":true,"zerolinewidth":2},"scene":{"xaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"yaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2},"zaxis":{"backgroundcolor":"#E5ECF6","gridcolor":"white","linecolor":"white","showbackground":true,"ticks":"","zerolinecolor":"white","gridwidth":2}},"shapedefaults":{"line":{"color":"#2a3f5f"}},"annotationdefaults":{"arrowcolor":"#2a3f5f","arrowhead":0,"arrowwidth":1},"geo":{"bgcolor":"white","landcolor":"#E5ECF6","subunitcolor":"white","showland":true,"showlakes":true,"lakecolor":"white"},"title":{"x":0.05},"mapbox":{"style":"light"}}},"xaxis":{"anchor":"y","domain":[0.0,1.0],"matches":"x2","showticklabels":false},"yaxis":{"anchor":"x","domain":[0.8,1.0],"title":{"text":"# of pairs"}},"xaxis2":{"anchor":"y2","domain":[0.0,1.0],"title":{"text":"Lag [-]"}},"yaxis2":{"anchor":"x2","domain":[0.0,0.8],"title":{"text":"semivariance (matheron)"}}},                        {"responsive": true}                    )                };                            </script>        </div>'}




.. GENERATED FROM PYTHON SOURCE LINES 53-60

Maximum likelihood using SciKit-GStat
-------------------------------------
First step to perform the fitting is to make initial guesses for the parameters.
Here, we take the mean separating distance for the effective range, the sample
variance for the sill and 10% of the sample variance for the nugget.
To improve performance and runtime, we also define a boundary to restrict
the parameter space.

.. GENERATED FROM PYTHON SOURCE LINES 60-75

.. code-block:: default


    # base initial guess on separating distance and sample variance
    sep_mean = V.distance.mean()
    sam_var = V.values.var()
    print(f"Mean sep. distance:  {sep_mean.round(1)}    sample variance: {sam_var.round(1)}")

    # create initial guess
    #    mean dist.  variance    5% of variance
    p0 = np.array([sep_mean, sam_var, 0.1 * sam_var])
    print('initial guess: ', p0.round(1))

    # create the bounds to restrict optimization
    bounds = [[0, V.bins[-1]], [0, 3*sam_var], [0, 2.9*sam_var]]
    print('bounds:        ', bounds)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Mean sep. distance:  253.5    sample variance: 1298.9
    initial guess:  [ 253.5 1298.9  129.9]
    bounds:         [[0, 453.28247263709636], [0, 3896.6137], [0, 3766.7265766666665]]




.. GENERATED FROM PYTHON SOURCE LINES 76-84

Next step is to pass the Variogram instance to the function factory.
We find optimal parameters by minimizing the returned negative
log-likelihood function. Please refer to SciPy's minimize function to learn
about attributes. The returned function from the utility suite is built with
SciPy in mind, as the function signature complies to SciPy's interface and,
thus can just be passed to the minimize function.
Here, we pass the initial guess, the bounds and set the solver method to
SLSQP, a suitable solver for bounded optimization.

.. GENERATED FROM PYTHON SOURCE LINES 84-98

.. code-block:: default


    # load the likelihood function for this variogram
    likelihood = get_likelihood(V)

    # minimize the likelihood function 
    t3 = time()
    res = minimize(likelihood, p0, bounds=bounds, method='SLSQP')
    t4 = time()

    # some priting
    print(f"Processing time {np.round(t4 - t3, 2)} seconds")
    print('initial guess:     ', p0.round(1))
    print('optimal parameters:', res.x.round(1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processing time 5.6 seconds
    initial guess:      [ 253.5 1298.9  129.9]
    optimal parameters: [ 184.2 1311.9    7.2]




.. GENERATED FROM PYTHON SOURCE LINES 99-107

Here, you can see one of the main limitations for ML approaches: runtime.
A sample size of 300 is rather small and the ML is running 
considerably slower that MoM.

Apply the optimized parameters. For comparison, the three method-of-moment methods
from SciKit-GStat are applied as well. Note that the used sample is quite dense.
Thus we do not expect a different between the MoM based procedures.
They should all find the same paramters.

.. GENERATED FROM PYTHON SOURCE LINES 107-129

.. code-block:: default


    # use 100 steps
    x = np.linspace(0, V.bins[-1], 100)

    # apply the maximum likelihood fit parameters
    y_ml = V.model(x, *res.x)

    # apply the trf fit
    y_trf = V.fitted_model(x)

    # apply Levelberg marquard
    V.fit_method = 'lm'
    y_lm = V.fitted_model(x)

    # apply parameter ml
    V.fit_method = 'ml'
    y_pml = V.fitted_model(x)

    # check if the method-of-moment fits are different
    print('Trf and Levenberg-Marquardt identical: ', all(y_lm - y_trf < 0.1))
    print('Trf and parameter ML identical:        ', all(y_pml - y_trf < 0.1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Trf and Levenberg-Marquardt identical:  True
    Trf and parameter ML identical:         True




.. GENERATED FROM PYTHON SOURCE LINES 130-131

Make the result plot

.. GENERATED FROM PYTHON SOURCE LINES 131-137

.. code-block:: default

    plt.plot(V.bins, V.experimental, '.b', label='experimental')
    plt.plot(x, y_ml, '-g', label='ML fit (Lark, 2000)')
    plt.plot(x, y_trf, '-b', label='SciKit-GStat TRF')
    plt.legend(loc='lower right')
    #plt.gcf().savefig('compare.pdf', dpi=300)




.. image-sg:: /auto_examples/images/sphx_glr_tutorial_07_maximum_likelihood_fit_001.png
   :alt: tutorial 07 maximum likelihood fit
   :srcset: /auto_examples/images/sphx_glr_tutorial_07_maximum_likelihood_fit_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdd7b65ddc0>



.. GENERATED FROM PYTHON SOURCE LINES 138-146

Build from scratch
------------------
SciKit-GStat's utility suite does only implement the maximum likelihood
approach as published by Lark (2000). There are no settings to adjust
the returned function, nor use other implementations. If you need to use
another approach, the idea behind the implementation is demonstrated below
for the spherical variogram model. This solution is only build on SciPy and
does not need SciKit-GStat, in case the distance matrix is build externally.

.. GENERATED FROM PYTHON SOURCE LINES 146-182

.. code-block:: default

    from scipy.spatial.distance import squareform
    from scipy.linalg import inv, det

    # define the spherical model only dependent on the range
    def f(h, a):
        if h >= a:
            return 1.
        elif h == 0:
            return 0.
        return (3*h) / (2*a) - 0.5 * (h / a)**3

    # create the autocovariance matrix 
    def get_A(r, s, b, dists):
        a = np.array([f(d, r) for d in dists])
        A = squareform((s / (s + b)) * (1 - a))
        np.fill_diagonal(A, 1)

        return A

    # likelihood function
    def like(r, s, b, z, dists):
        A = get_A(r, s, b, dists)
        n = len(A)
        A_inv = inv(A)
        ones = np.ones((n, 1))
        z = z.reshape(n, -1)
        m = inv(ones.T @ A_inv @ ones) @ (ones.T @ A_inv @ z)
        b = np.log((z - m).T @ A_inv @ (z - m))
        d = np.log(det(A))
        if d == -np.inf:
            print('invalid det(A)')
            return np.inf
        loglike = (n / 2)*np.log(2*np.pi) + (n / 2) - (n / 2)* np.log(n) + 0.5* d + (n / 2) * b
        return loglike.flatten()[0]









.. GENERATED FROM PYTHON SOURCE LINES 183-188

You can adjust the autocorrelation function above to any other model and
implement other approaches by adjusting the ``like`` function.
Finally, minimizing this function is the same like before. You also have to 
take care of the SciPy interface, as you need to wrap the custom likelihood
function to provide the parameters in the right format.

.. GENERATED FROM PYTHON SOURCE LINES 188-205

.. code-block:: default

    from scipy.optimize import minimize
    from scipy.spatial.distance import pdist

    # c and v are coordinate and values array from the data source
    z = np.array(v)

    # in case you use 2D coordinates, without caching and euclidean metric, skgstat is using pdist under the hood
    dists = pdist(c)

    fun = lambda x, *args: like(x[0], x[1], x[2], z=z, dists=dists)
    t3 = time()
    res = minimize(fun, p0, bounds=bounds)
    t4 = time()
    print(f"Processing time {np.round(t4 - t3, 2)} seconds")
    print('initial guess:     ', p0.round(1))
    print('optimal parameters:', res.x.round(1))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Processing time 3.55 seconds
    initial guess:      [ 253.5 1298.9  129.9]
    optimal parameters: [ 184.2 1312.8    7.2]




.. GENERATED FROM PYTHON SOURCE LINES 206-207

Finally, you can produce the same plot as before.

.. GENERATED FROM PYTHON SOURCE LINES 207-219

.. code-block:: default

    import matplotlib.pyplot as plt
    mod = lambda h: f(h, res.x[0]) * res.x[1] + res.x[2]

    x = np.linspace(0, 450, 100)
    y = list(map(mod, x))
    y2 = V.fitted_model(x)

    plt.plot(V.bins, V.experimental, '.b', label='experimental')
    plt.plot(x, y, '-g', label='ML fit (Lark, 2000)')
    plt.plot(x, y2, '-b', label='SciKit-GStat default fit')
    plt.legend(loc='lower right')
    #plt.gcf().savefig('compare.pdf', dpi=300)



.. image-sg:: /auto_examples/images/sphx_glr_tutorial_07_maximum_likelihood_fit_002.png
   :alt: tutorial 07 maximum likelihood fit
   :srcset: /auto_examples/images/sphx_glr_tutorial_07_maximum_likelihood_fit_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7fdd7b6f0be0>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.553 seconds)


.. _sphx_glr_download_auto_examples_tutorial_07_maximum_likelihood_fit.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: tutorial_07_maximum_likelihood_fit.py <tutorial_07_maximum_likelihood_fit.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: tutorial_07_maximum_likelihood_fit.ipynb <tutorial_07_maximum_likelihood_fit.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
